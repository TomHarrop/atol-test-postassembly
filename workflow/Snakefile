#!/usr/bin/env python3


include: "rules/common.smk"
include: "rules/samtools_import.smk"
include: "rules/samtools_fasta.smk"


# this is not all the files for this organism
data_file_dict = {
    "350730_AusARG_AGRF_PacBio_DA060220.ccs.bam": "https://data.bioplatforms.com/dataset/bpa-ausarg-pacbio-hifi-350730-da060220/resource/9c5f03b2ee87a9fe0694bce3b385572d/download/350730_AusARG_AGRF_PacBio_DA060220.ccs.bam",
    "350730_AusARG_AGRF_PacBio_DA060219.ccs.bam": "https://data.bioplatforms.com/dataset/bpa-ausarg-pacbio-hifi-350730-da060219/resource/0b0d3aff5063a3136ecc3c19a8155d81/download/350730_AusARG_AGRF_PacBio_DA060219.ccs.bam",
    "350769_AusARG_BRF_HCN7WDRXY_S5_L001_R1_001.fastq.gz": "https://data.bioplatforms.com/dataset/bpa-ausarg-hi-c-350769-hcn7wdrxy/resource/32160fb268f7e27926a966856b6f7f8b/download/350769_AusARG_BRF_HCN7WDRXY_S5_L001_R1_001.fastq.gz",
    "350769_AusARG_BRF_HCN7WDRXY_S5_L001_R2_001.fastq.gz": "https://data.bioplatforms.com/dataset/bpa-ausarg-hi-c-350769-hcn7wdrxy/resource/4a8b972663f6a6d4d0f079ceb9939268/download/350769_AusARG_BRF_HCN7WDRXY_S5_L001_R2_001.fastq.gz",
}


def format_params(wildcards, input):
    param_dict = {
        "pacbio_reads": to_storage(input.pacbio_reads).flags["storage_object"].query,
        "hic_reads": to_storage(input.hic_reads).flags["storage_object"].query,
    }
    return param_dict


rule format_config_file:
    input:
        "resources/configs/genomenote_test.csv",
        pacbio_reads=to_storage(
            Path(dataset_id, "results", "reads", "hifi", "ccs_reads.fasta.gz")
        ),
        hic_reads=to_storage(Path(dataset_id, "results", "reads", "hic", "hic.cram")),
    output:
        rendered_yaml=to_storage(
            Path(
                dataset_id, "results", "config", "sangertol_genomeassembly_params.yaml"
            )
        ),
    params:
        format_params,
        dataset_id=dataset_id,
    template_engine:
        "jinja2"


# todo: get the query like this:
# registered_storage(f"{scheme}://{storage_prefix}/{path_string}")._flags["storage_object"].query
# has to be an easier way


rule config_target:
    default_target: True
    localrule: True
    input:
        to_storage(Path(dataset_id, "results", "reads", "hifi", "ccs_reads.fasta.gz")),
        to_storage(Path(dataset_id, "results", "reads", "hic", "hic.cram.crai")),
        to_storage(Path(dataset_id, "results", "reads", "hic", "hic.cram")),
        rendered_yaml=to_storage(
            Path(
                dataset_id, "results", "config", "sangertol_genomeassembly_params.yaml"
            )
        ),
    output:
        "results/sangertol_genomeassembly_params.yaml",
    shell:
        "cp {input.rendered_yaml} {output}"
